"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HasId = exports.HasName = void 0;
const utils_1 = require("../utils");
const primitiveTypes_1 = require("./primitiveTypes");
const nameRegex = /^[A-Z]([A-Za-z0-9_]){0,254}$/;
class HasName {
    /**
     * Set the name and check if it matches the regular expression specified
     * in the invariant for "name" properties. A name must be between 1 and 255 characters long,
     * begin with an uppercase letter, and contain only uppercase letter, lowercase letter,
     * numeral, and '_' characters.
     * If the string does not match, log an error.
     *
     * @see {@link http://hl7.org/fhir/R4/structuredefinition-definitions.html#StructureDefinition.name}
     * @see {@link http://hl7.org/fhir/R4/valueset-definitions.html#ValueSet.name}
     * @see {@link http://hl7.org/fhir/R4/codesystem-definitions.html#CodeSystem.name}
     * @param {string} name - The name to check against the name invariant
     * @param {SourceInfo} sourceInfo - The FSH file and location that specified the name
     */
    setName(name, sourceInfo) {
        this.name = name;
        if (!nameRegex.test(name)) {
            utils_1.logger.warn(`The name "${name}" may not be suitable for machine processing applications such as code generation. Valid names start with an ` +
                "upper-case ASCII letter ('A'..'Z') followed by any combination of upper- or lower-case ASCII letters ('A'..'Z', and " +
                "'a'..'z'), numerals ('0'..'9') and '_', with a length limit of 255 characters.", sourceInfo);
        }
    }
}
exports.HasName = HasName;
class HasId {
    /**
     * Set the id and check if it matches the regular expression specified
     * in the definition of the "id" type.
     * If the FHIRId does not match, log an error.
     *
     * @param id - The new id to set
     * @param sourceInfo - The FSH file and location that specified the id
     */
    setId(id, sourceInfo) {
        this.id = id;
        this.validateId(sourceInfo);
    }
    /**
     * Check if the current id matches the regular expression specified
     * in the definition of the "id" type.
     * If the FHIRId does not match, log an error.
     * If the id is a valid name, sanitize it to a valid id and log a warning
     *
     * @param sourceInfo - The FSH file and location that specified the id
     */
    validateId(sourceInfo) {
        let validId = primitiveTypes_1.idRegex.test(this.id);
        if (!validId && nameRegex.test(this.id)) {
            // A valid name can be turned into a valid id by replacing _ with - and slicing to 64 character limit
            const sanitizedId = this.id.replace(/_/g, '-').slice(0, 64);
            if (primitiveTypes_1.idRegex.test(sanitizedId)) {
                // Use the sanitized id, but warn the user to fix this
                utils_1.logger.warn(`The string "${this.id}" represents a valid FHIR name but not a valid FHIR id. FHIR ids cannot contain "_" and can be at most 64 characters. The id will be exported as "${sanitizedId}". Avoid this warning by specifying a valid id directly using the "Id" keyword.`, sourceInfo);
                this.id = sanitizedId;
                validId = true;
            }
        }
        if (!validId) {
            utils_1.logger.error(`The string "${this.id}" does not represent a valid FHIR id. FHIR ids may contain any combination of upper- or lower-case ASCII letters ('A'..'Z', and 'a'..'z'), numerals ('0'..'9'), '-' and '.', with a length limit of 64 characters.`, sourceInfo);
        }
    }
}
exports.HasId = HasId;
//# sourceMappingURL=mixins.js.map