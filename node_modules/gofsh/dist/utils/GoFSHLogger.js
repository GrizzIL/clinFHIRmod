"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.errorsAndWarnings = exports.stats = exports.ErrorsAndWarnings = exports.logger = void 0;
const winston_1 = require("winston");
const chalk_1 = __importDefault(require("chalk"));
const { combine, printf } = winston_1.format;
const incrementCounts = winston_1.format(info => {
    switch (info.level) {
        case 'info':
            exports.stats.numInfo++;
            break;
        case 'warn':
            exports.stats.numWarn++;
            break;
        case 'error':
            exports.stats.numError++;
            break;
        case 'debug':
            exports.stats.numDebug++;
            break;
        default:
            break;
    }
    return info;
});
const trackErrorsAndWarnings = winston_1.format(info => {
    if (!exports.errorsAndWarnings.shouldTrack) {
        return info;
    }
    if (info.level === 'error') {
        exports.errorsAndWarnings.errors.push({
            message: info.message,
            location: info.location,
            input: info.file
        });
    }
    else if (info.level === 'warn') {
        exports.errorsAndWarnings.warnings.push({
            message: info.message,
            location: info.location,
            input: info.file
        });
    }
    return info;
});
const printer = printf(info => {
    let level;
    switch (info.level) {
        case 'info':
            level = chalk_1.default.whiteBright.bgGreen(`${info.level} `);
            break;
        case 'warn':
            // (179, 98, 0) = dark dark orange
            level = chalk_1.default.whiteBright.bgRgb(179, 98, 0)(`${info.level} `);
            break;
        case 'error':
            level = chalk_1.default.whiteBright.bgRed(`${info.level}`);
            break;
        case 'debug':
            level = chalk_1.default.whiteBright.bgBlue(`${info.level}`);
            break;
        default:
            break;
    }
    return `${level} ${info.message}`;
});
exports.logger = winston_1.createLogger({
    format: combine(incrementCounts(), trackErrorsAndWarnings(), printer),
    transports: [new winston_1.transports.Console()]
});
class LoggerStats {
    constructor() {
        this.numInfo = 0;
        this.numWarn = 0;
        this.numError = 0;
        this.numDebug = 0;
    }
    reset() {
        this.numInfo = 0;
        this.numWarn = 0;
        this.numError = 0;
        this.numDebug = 0;
    }
}
class ErrorsAndWarnings {
    constructor() {
        this.errors = [];
        this.warnings = [];
        this.shouldTrack = false;
    }
    reset() {
        this.errors = [];
        this.warnings = [];
        this.shouldTrack = false;
    }
}
exports.ErrorsAndWarnings = ErrorsAndWarnings;
exports.stats = new LoggerStats();
exports.errorsAndWarnings = new ErrorsAndWarnings();
//# sourceMappingURL=GoFSHLogger.js.map