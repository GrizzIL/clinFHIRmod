"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const exportable_1 = require("../../exportable");
const RemoveImpliedZeroZeroCardRulesOptimizer_1 = __importDefault(require("./RemoveImpliedZeroZeroCardRulesOptimizer"));
const lodash_1 = require("lodash");
exports.default = {
    name: 'combine_card_and_flag_rules',
    description: 'Combine card rules (foo 1..1) and flag rules (foo MS) into a single rule (foo 1..1 MS)',
    runAfter: [RemoveImpliedZeroZeroCardRulesOptimizer_1.default.name],
    optimize(pkg) {
        [...pkg.profiles, ...pkg.extensions].forEach(sd => {
            const rulesToRemove = [];
            sd.rules.forEach((rule, i) => {
                if (rule instanceof exportable_1.ExportableCardRule) {
                    const flagRuleIdx = sd.rules.findIndex(other => other.path === rule.path && other instanceof exportable_1.ExportableFlagRule);
                    if (flagRuleIdx >= 0) {
                        sd.rules[i] = new exportable_1.ExportableCombinedCardFlagRule(rule.path, rule, sd.rules[flagRuleIdx]);
                        rulesToRemove.push(flagRuleIdx);
                    }
                }
            });
            lodash_1.pullAt(sd.rules, rulesToRemove);
        });
    }
};
//# sourceMappingURL=CombineCardAndFlagRulesOptimizer.js.map