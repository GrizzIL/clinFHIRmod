"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const exportable_1 = require("../../exportable");
const lodash_1 = require("lodash");
const fsh_sushi_1 = require("fsh-sushi");
const { FshCode } = fsh_sushi_1.fshtypes;
exports.default = {
    name: 'remove_default_extension_context_rules',
    description: 'Remove extension contexts matching the default context that SUSHI generates',
    optimize(pkg) {
        // * ^context[0].type = #element
        const DEFAULT_TYPE = new exportable_1.ExportableCaretValueRule('');
        DEFAULT_TYPE.caretPath = 'context[0].type';
        DEFAULT_TYPE.value = new FshCode('element');
        // * ^context[0].expression = "Element"
        const DEFAULT_EXPRESSION = new exportable_1.ExportableCaretValueRule('');
        DEFAULT_EXPRESSION.caretPath = 'context[0].expression';
        DEFAULT_EXPRESSION.value = 'Element';
        // Loop through extensions looking for the default context type (and removing it)
        pkg.extensions.forEach(sd => {
            const numContexts = sd.rules.filter(r => r instanceof exportable_1.ExportableCaretValueRule &&
                r.path === '' &&
                /^context\[\d+]\.type$/.test(r.caretPath)).length;
            if (numContexts === 1) {
                const typeRuleIdx = sd.rules.findIndex(r => lodash_1.isEqual(r, DEFAULT_TYPE));
                const expressionRuleIdx = sd.rules.findIndex(r => lodash_1.isEqual(r, DEFAULT_EXPRESSION));
                if (typeRuleIdx !== -1 && expressionRuleIdx !== -1) {
                    lodash_1.pullAt(sd.rules, [typeRuleIdx, expressionRuleIdx]);
                }
            }
        });
    }
};
//# sourceMappingURL=RemoveDefaultExtensionContextRulesOptimizer.js.map