"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const exportable_1 = require("../../exportable");
const lodash_1 = require("lodash");
// Loop over all profiles and extensions, removing assignment rules on inline extensions
// NOTE: Inline extensions on a profile are allowed by SUSHI, but they are technically not
// valid FHIR and the IG Publisher does not like this
exports.default = {
    name: 'remove_extension_url_assignment_rules',
    description: 'Remove assignment rules on inline extension "url" paths since SUSHI automatically applies these',
    optimize(pkg) {
        var _a, _b;
        [...pkg.profiles, ...pkg.extensions].forEach(sd => {
            const rulesToRemove = [];
            sd.rules.forEach(rule => {
                if (rule instanceof exportable_1.ExportableContainsRule && /(modifierE|e)xtension$/.test(rule.path)) {
                    rule.items.forEach(item => {
                        const assignmentRuleIdx = sd.rules.findIndex(other => other instanceof exportable_1.ExportableAssignmentRule &&
                            other.path === `${rule.path}[${item.name}].url` &&
                            other.value === item.name);
                        if (assignmentRuleIdx >= 0) {
                            rulesToRemove.push(assignmentRuleIdx);
                        }
                    });
                }
            });
            lodash_1.pullAt(sd.rules, rulesToRemove);
        });
        // We must know the configuration to determine if a rule assigning "url" matches the url that SUSHI will assume
        if ((_b = (_a = pkg.configuration) === null || _a === void 0 ? void 0 : _a.config) === null || _b === void 0 ? void 0 : _b.canonical) {
            pkg.extensions.forEach(extension => {
                const rulesToRemove = [];
                extension.rules.forEach((rule, i) => {
                    if (rule instanceof exportable_1.ExportableAssignmentRule &&
                        rule.path === 'url' &&
                        rule.value ===
                            `${pkg.configuration.config.canonical}/StructureDefinition/${extension.id}`) {
                        rulesToRemove.push(i);
                    }
                });
                lodash_1.pullAt(extension.rules, rulesToRemove);
            });
        }
    }
};
//# sourceMappingURL=RemoveExtensionURLAssignmentRules.js.map