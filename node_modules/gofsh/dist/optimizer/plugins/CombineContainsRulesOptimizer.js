"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const exportable_1 = require("../../exportable");
const ConstructNamedExtensionContainsRulesOptimizer_1 = __importDefault(require("./ConstructNamedExtensionContainsRulesOptimizer"));
const lodash_1 = require("lodash");
exports.default = {
    name: 'combine_contains_rules',
    description: 'Combine separate contains rules on the same path to a single contains rule with multiple items',
    runAfter: [ConstructNamedExtensionContainsRulesOptimizer_1.default.name],
    optimize(pkg) {
        [...pkg.profiles, ...pkg.extensions].forEach(sd => {
            const rulesToRemove = [];
            sd.rules.forEach((rule, i) => {
                if (rule instanceof exportable_1.ExportableContainsRule && !rulesToRemove.includes(i)) {
                    sd.rules.forEach((otherRule, otherRuleIdx) => {
                        if (otherRule.path === rule.path &&
                            otherRule instanceof exportable_1.ExportableContainsRule &&
                            otherRuleIdx !== i) {
                            rulesToRemove.push(otherRuleIdx);
                            rule.items.push(...otherRule.items);
                            rule.cardRules.push(...otherRule.cardRules);
                            rule.flagRules.push(...otherRule.flagRules);
                        }
                    });
                }
            });
            lodash_1.pullAt(sd.rules, rulesToRemove);
        });
    }
};
//# sourceMappingURL=CombineContainsRulesOptimizer.js.map