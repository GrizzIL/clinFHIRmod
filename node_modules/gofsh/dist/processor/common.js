"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeNameSushiSafe = exports.switchQuantityRules = void 0;
const lodash_1 = require("lodash");
const exportable_1 = require("../exportable");
const utils_1 = require("../utils");
// Places general Quantity-setting rules ahead of Quantity.unit setting rules
function switchQuantityRules(rules) {
    let unitIndex;
    let lastSiblingIndex;
    let basePath;
    let siblingPaths;
    rules.forEach((rule, index) => {
        if (!(rule instanceof exportable_1.ExportableAssignmentRule || rule instanceof exportable_1.ExportableCaretValueRule)) {
            return;
        }
        const operativePath = rule instanceof exportable_1.ExportableCaretValueRule ? rule.caretPath : rule.path;
        if (operativePath.endsWith('.unit')) {
            unitIndex = index;
            basePath = operativePath.replace(/\.unit$/, '');
            siblingPaths = [`${basePath}.system`, `${basePath}.code`, `${basePath}.value`, basePath];
        }
        else {
            if (siblingPaths === null || siblingPaths === void 0 ? void 0 : siblingPaths.includes(operativePath)) {
                lastSiblingIndex = index;
                if (lastSiblingIndex > unitIndex) {
                    rules.splice(unitIndex, 0, rule);
                    lodash_1.pullAt(rules, [index + 1]);
                }
            }
        }
    });
}
exports.switchQuantityRules = switchQuantityRules;
function makeNameSushiSafe(entity) {
    if (/\s/.test(entity.name)) {
        let entityType;
        if (entity instanceof exportable_1.ExportableValueSet) {
            entityType = 'ValueSet';
        }
        else if (entity instanceof exportable_1.ExportableCodeSystem) {
            entityType = 'CodeSystem';
        }
        else {
            entityType = 'StructureDefinition';
        }
        utils_1.logger.warn(`${entityType} with id ${entity.id} has name with whitespace. Converting whitespace to underscores.`);
        const nameRule = new exportable_1.ExportableCaretValueRule('');
        nameRule.caretPath = 'name';
        nameRule.value = entity.name;
        entity.name = entity.name.replace(/\s/g, '_');
        entity.rules.unshift(nameRule);
    }
}
exports.makeNameSushiSafe = makeNameSushiSafe;
//# sourceMappingURL=common.js.map