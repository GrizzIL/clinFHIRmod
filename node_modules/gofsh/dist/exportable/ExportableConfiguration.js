"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExportableConfiguration = void 0;
const yaml_1 = __importDefault(require("yaml"));
class ExportableConfiguration {
    constructor(config) {
        this.config = config;
    }
    toFSH() {
        // canonical, fhirVersion, and FSHOnly are always present
        const yaml = new yaml_1.default.Document();
        yaml.contents = yaml_1.default.createNode({
            canonical: this.config.canonical,
            fhirVersion: this.config.fhirVersion[0],
            FSHOnly: this.config.FSHOnly,
            applyExtensionMetadataToRoot: this.config.applyExtensionMetadataToRoot
        });
        // id, name, status, version, and dependencies are the optional configuration properties.
        if (this.config.id) {
            yaml.contents.add({ key: 'id', value: this.config.id });
        }
        if (this.config.name) {
            yaml.contents.add({ key: 'name', value: this.config.name });
        }
        if (this.config.status) {
            yaml.contents.add({ key: 'status', value: this.config.status });
        }
        if (this.config.version) {
            yaml.contents.add({ key: 'version', value: this.config.version });
        }
        if (this.config.dependencies) {
            const fshDependencies = {};
            this.config.dependencies.forEach((dependency) => {
                if (dependency.id) {
                    fshDependencies[dependency.packageId] = {
                        version: dependency.version,
                        uri: dependency.uri,
                        id: dependency.id
                    };
                }
                else {
                    fshDependencies[dependency.packageId] = dependency.version;
                }
            });
            yaml.contents.add({ key: 'dependencies', value: fshDependencies });
        }
        return yaml.toString();
    }
}
exports.ExportableConfiguration = ExportableConfiguration;
//# sourceMappingURL=ExportableConfiguration.js.map