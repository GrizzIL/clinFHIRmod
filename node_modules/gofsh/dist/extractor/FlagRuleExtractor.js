"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlagRuleExtractor = void 0;
const exportable_1 = require("../exportable");
const utils_1 = require("../utils");
class FlagRuleExtractor {
    static process(input) {
        var _a, _b, _c;
        const standardStatusIndex = (_a = input.extension) === null || _a === void 0 ? void 0 : _a.findIndex(ext => ext.url === 'http://hl7.org/fhir/StructureDefinition/structuredefinition-standards-status');
        const standardStatus = (_c = (_b = input.extension) === null || _b === void 0 ? void 0 : _b[standardStatusIndex]) === null || _c === void 0 ? void 0 : _c.valueCode;
        if (['draft', 'normative', 'trial-use'].includes(standardStatus) ||
            input.mustSupport ||
            input.isSummary ||
            input.isModifier) {
            const flagRule = new exportable_1.ExportableFlagRule(utils_1.getPath(input));
            if (input.mustSupport) {
                flagRule.mustSupport = true;
                input.processedPaths.push('mustSupport');
            }
            if (input.isSummary) {
                flagRule.summary = true;
                input.processedPaths.push('isSummary');
            }
            if (input.isModifier) {
                flagRule.modifier = true;
                input.processedPaths.push('isModifier');
            }
            if (standardStatus === 'draft') {
                flagRule.draft = true;
            }
            else if (standardStatus === 'normative') {
                flagRule.normative = true;
            }
            else if (standardStatus === 'trial-use') {
                flagRule.trialUse = true;
            }
            if (standardStatusIndex >= 0) {
                input.processedPaths.push(`extension[${standardStatusIndex}].url`, `extension[${standardStatusIndex}].valueCode`);
            }
            return flagRule;
        }
        else {
            return null;
        }
    }
}
exports.FlagRuleExtractor = FlagRuleExtractor;
//# sourceMappingURL=FlagRuleExtractor.js.map