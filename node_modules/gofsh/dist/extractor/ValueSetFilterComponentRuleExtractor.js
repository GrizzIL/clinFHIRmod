"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValueSetFilterComponentRuleExtractor = void 0;
const fsh_sushi_1 = require("fsh-sushi");
const utils_1 = require("../utils");
const exportable_1 = require("../exportable");
class ValueSetFilterComponentRuleExtractor {
    static process(vsComponent, valueSet, inclusion) {
        var _a, _b;
        if (((_a = vsComponent.concept) === null || _a === void 0 ? void 0 : _a.length) && !((_b = vsComponent.filter) === null || _b === void 0 ? void 0 : _b.length)) {
            // This is a concept rule that should be handled by ValueSetConceptComponentRuleExtractor
            return;
        }
        const filterRule = new exportable_1.ExportableValueSetFilterComponentRule(inclusion);
        // * include/exclude codes from...
        if (vsComponent.system || vsComponent.valueSet) {
            filterRule.from = {};
            if (vsComponent.system) {
                filterRule.from.system = vsComponent.system;
                if (vsComponent.version) {
                    filterRule.from.system += `|${vsComponent.version}`;
                }
            }
            if (vsComponent.valueSet) {
                filterRule.from.valueSets = vsComponent.valueSet;
            }
        }
        // ... where ...
        if (vsComponent.filter) {
            filterRule.filters = vsComponent.filter.map(f => {
                let value;
                switch (f.op) {
                    case fsh_sushi_1.fshtypes.VsOperator.EQUALS:
                    case fsh_sushi_1.fshtypes.VsOperator.IN:
                    case fsh_sushi_1.fshtypes.VsOperator.NOT_IN:
                        // value should be a string
                        value = f.value;
                        break;
                    case fsh_sushi_1.fshtypes.VsOperator.IS_A:
                    case fsh_sushi_1.fshtypes.VsOperator.DESCENDENT_OF:
                    case fsh_sushi_1.fshtypes.VsOperator.IS_NOT_A:
                    case fsh_sushi_1.fshtypes.VsOperator.GENERALIZES:
                        // value should be a code
                        value = new fsh_sushi_1.fshtypes.FshCode(f.value);
                        break;
                    case fsh_sushi_1.fshtypes.VsOperator.REGEX:
                        // value should be a regular expression
                        value = new RegExp(f.value);
                        break;
                    case fsh_sushi_1.fshtypes.VsOperator.EXISTS:
                        // value should be a boolean
                        value = f.value === 'true';
                        break;
                    default:
                        // unknown operator type; default to a string value
                        value = f.value;
                        utils_1.logger.error(`Unsupported filter operator in ValueSet ${valueSet.id}: ${f.op}`);
                }
                return {
                    property: f.property,
                    operator: f.op,
                    value
                };
            });
        }
        return filterRule;
    }
}
exports.ValueSetFilterComponentRuleExtractor = ValueSetFilterComponentRuleExtractor;
//# sourceMappingURL=ValueSetFilterComponentRuleExtractor.js.map