#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const commander_1 = __importDefault(require("commander"));
const chalk_1 = __importDefault(require("chalk"));
const lodash_1 = require("lodash");
const export_1 = require("./export");
const ig_1 = require("./ig");
const utils_1 = require("./utils");
const fhirdefs_1 = require("./fhirdefs");
const fhirdefs_2 = require("./fhirdefs");
const Processing_1 = require("./utils/Processing");
const FSH_VERSION = '1.0.0';
app().catch(e => {
    utils_1.logger.error(`SUSHI encountered the following unexpected error: ${e.message}`);
    process.exit(1);
});
function app() {
    return __awaiter(this, void 0, void 0, function* () {
        let input;
        commander_1.default
            .name('sushi')
            .usage('[path-to-fsh-defs] [options]')
            .option('-o, --out <out>', 'the path to the output folder')
            .option('-d, --debug', 'output extra debugging information')
            .option('-s, --snapshot', 'generate snapshot in Structure Definition output', false)
            .option('-i, --init', 'initialize a SUSHI project')
            .version(getVersion(), '-v, --version', 'print SUSHI version')
            .on('--help', () => {
            console.log('');
            console.log('Additional information:');
            console.log('  [path-to-fsh-defs]');
            console.log('    Default: "."');
            console.log('    If input/fsh/ subdirectory present, it is included in [path-to-fsh-defs]');
            console.log('  -o, --out <out>');
            console.log('    Default: "fsh-generated"');
            console.log('    If legacy publisher mode (fsh subdirectory present), default output is parent of "fsh"');
            console.log('    If legacy flat mode (no input/fsh or fsh subdirectories present), default output is "build"');
        })
            .arguments('[path-to-fsh-defs]')
            .action(function (pathToFshDefs) {
            input = pathToFshDefs;
        })
            .parse(process.argv);
        if (commander_1.default.init) {
            yield Processing_1.init();
            process.exit(0);
        }
        if (commander_1.default.debug)
            utils_1.logger.level = 'debug';
        utils_1.logger.info(`Running ${getVersion()}`);
        utils_1.logger.info('Arguments:');
        if (commander_1.default.debug) {
            utils_1.logger.info('  --debug');
        }
        if (commander_1.default.snapshot) {
            utils_1.logger.info('  --snapshot');
        }
        if (commander_1.default.out) {
            utils_1.logger.info(`  --out ${path_1.default.resolve(commander_1.default.out)}`);
        }
        utils_1.logger.info(`  ${path_1.default.resolve(input)}`);
        // IG Publisher HACK: the IG Publisher invokes SUSHI with `/fsh` appended (even if it doesn't
        // exist).  If we detect a direct fsh path, we need to fix it by backing up a folder, else it
        // won't correctly detect the IG Publisher mode.
        if (path_1.default.basename(input) === 'fsh') {
            input = path_1.default.dirname(input);
        }
        const originalInput = input;
        input = Processing_1.findInputDir(input);
        // If an input/fsh subdirectory is used, we are in an IG Publisher context
        const fshFolder = path_1.default.basename(input) === 'fsh';
        const inputFshFolder = fshFolder && path_1.default.basename(path_1.default.dirname(input)) === 'input';
        const isIgPubContext = inputFshFolder;
        // TODO: Legacy support for top level fsh/ subdirectory. Remove when no longer supported.
        const isLegacyIgPubContext = fshFolder && !inputFshFolder;
        const outDir = Processing_1.ensureOutputDir(input, commander_1.default.out, isIgPubContext, isLegacyIgPubContext);
        let tank;
        let config;
        try {
            const rawFSH = Processing_1.getRawFSHes(input);
            if (rawFSH.length === 0) {
                utils_1.logger.info('No FSH files present.');
                process.exit(0);
            }
            config = Processing_1.readConfig(isIgPubContext ? originalInput : input);
            tank = Processing_1.fillTank(rawFSH, config);
        }
        catch (_a) {
            commander_1.default.outputHelp();
            process.exit(1);
        }
        // Load dependencies
        const defs = new fhirdefs_2.FHIRDefinitions();
        const dependencyDefs = Processing_1.loadExternalDependencies(defs, config);
        // Load custom resources
        if (!isIgPubContext) {
            // In legacy configuration (both IG publisher context and any other tank), resources are in ig-data/input/
            fhirdefs_1.loadCustomResources(path_1.default.join(input, 'ig-data', 'input'), defs);
        }
        else {
            // In current tank configuration (input/fsh), resources will be in input/
            fhirdefs_1.loadCustomResources(path_1.default.join(input, '..'), defs);
        }
        yield Promise.all(dependencyDefs);
        // Check for StructureDefinition
        const structDef = defs.fishForFHIR('StructureDefinition', utils_1.Type.Resource);
        if ((structDef === null || structDef === void 0 ? void 0 : structDef.version) !== '4.0.1') {
            utils_1.logger.error('StructureDefinition resource not found for v4.0.1. The FHIR R4 package in local cache' +
                ' may be corrupt. Local FHIR cache can be found at <home-directory>/.fhir/packages.' +
                ' For more information, see https://wiki.hl7.org/FHIR_Package_Cache#Location.');
            process.exit(1);
        }
        utils_1.logger.info('Converting FSH to FHIR resources...');
        const outPackage = export_1.exportFHIR(tank, defs);
        Processing_1.writeFHIRResources(outDir, outPackage, commander_1.default.snapshot, isIgPubContext);
        // If FSHOnly is true in the config, do not generate IG content, otherwise, generate IG content
        if (config.FSHOnly) {
            utils_1.logger.info('Exporting FSH definitions only. No IG related content will be exported.');
        }
        else {
            const igDataPath = isIgPubContext
                ? path_1.default.resolve(input, '..', '..')
                : path_1.default.resolve(input, 'ig-data');
            utils_1.logger.info('Assembling Implementation Guide sources...');
            const igExporter = new ig_1.IGExporter(outPackage, defs, igDataPath, isIgPubContext);
            igExporter.export(outDir);
            utils_1.logger.info('Assembled Implementation Guide sources; ready for IG Publisher.');
            if (!fs_extra_1.default
                .readdirSync(outDir)
                .some(file => file.startsWith('_genonce') || file.startsWith('_updatePublisher'))) {
                utils_1.logger.info('The sample-ig located at https://github.com/FHIR/sample-ig contains scripts useful for downloading and running the IG Publisher.');
            }
        }
        console.log();
        printResults(outPackage, !config.FSHOnly);
        const exitCode = utils_1.stats.numError > 0 ? 1 : 0;
        process.exit(exitCode);
    });
}
function getVersion() {
    var _a;
    const packageJSONPath = path_1.default.join(__dirname, '..', 'package.json');
    if (fs_extra_1.default.existsSync(packageJSONPath)) {
        const sushiVersion = (_a = fs_extra_1.default.readJSONSync(packageJSONPath)) === null || _a === void 0 ? void 0 : _a.version;
        return `SUSHI v${sushiVersion} (implements FHIR Shorthand specification v${FSH_VERSION})`;
    }
    return 'unknown';
}
function printResults(pkg, isIG) {
    // NOTE: These variables are creatively names to align well in the strings below while keeping prettier happy
    const prNum = lodash_1.pad(pkg.profiles.length.toString(), 8);
    const extnNum = lodash_1.pad(pkg.extensions.length.toString(), 10);
    const vstNum = lodash_1.pad(pkg.valueSets.length.toString(), 9);
    const cdsysNum = lodash_1.pad(pkg.codeSystems.length.toString(), 11);
    const insNum = lodash_1.pad(pkg.instances.length.toString(), 9);
    const errorNumMsg = lodash_1.pad(`${utils_1.stats.numError} Error${utils_1.stats.numError !== 1 ? 's' : ''}`, 13);
    const wrNumMsg = lodash_1.padStart(`${utils_1.stats.numWarn} Warning${utils_1.stats.numWarn !== 1 ? 's' : ''}`, 12);
    let resultStatus;
    if (utils_1.stats.numError === 0 && utils_1.stats.numWarn === 0) {
        resultStatus = 'clean';
    }
    else if (utils_1.stats.numError > 0) {
        resultStatus = 'errors';
    }
    else {
        resultStatus = 'warnings';
    }
    const aWittyMessageInvolvingABadFishPun = lodash_1.padEnd(lodash_1.sample(MESSAGE_MAP[resultStatus]), 36);
    const clr = COLOR_MAP[resultStatus];
    // NOTE: Doing some funky things w/ strings on some lines to keep overall alignment in the code
    const results = [
        clr('╔' + '════════════════════════ SUSHI RESULTS ══════════════════════════' + '' + '╗'),
        clr('║') + ' ╭──────────┬────────────┬───────────┬─────────────┬───────────╮ ' + clr('║'),
        clr('║') + ' │ Profiles │ Extensions │ ValueSets │ CodeSystems │ Instances │ ' + clr('║'),
        clr('║') + ' ├──────────┼────────────┼───────────┼─────────────┼───────────┤ ' + clr('║'),
        clr('║') + ` │ ${prNum} │ ${extnNum} │ ${vstNum} │ ${cdsysNum} │ ${insNum} │ ` + clr('║'),
        clr('║') + ' ╰──────────┴────────────┴───────────┴─────────────┴───────────╯ ' + clr('║'),
        clr('║' + '                                                                 ' + '' + '║'),
        clr('╠' + '═════════════════════════════════════════════════════════════════' + '' + '╣'),
        clr('║') + ` ${aWittyMessageInvolvingABadFishPun} ${errorNumMsg} ${wrNumMsg} ` + clr('║'),
        clr('╚' + '═════════════════════════════════════════════════════════════════' + '' + '╝')
    ];
    if (!isIG) {
        results.splice(7, 1);
    }
    results.forEach(r => console.log(r));
}
const MESSAGE_MAP = {
    clean: [
        'That went swimmingly!',
        'O-fish-ally error free!',
        "Nice! You're totally krilling it!",
        'Cool and So-fish-ticated!',
        'Well hooked and landed!',
        'You earned a PhD in Ichthyology!',
        'You rock, lobster!',
        'Everything is ship-shape!',
        'Ex-clam-ation point!',
        'Ac-clam-ations!',
        'Fin-tastic job!',
        "You're dolphinitely doing great!"
    ],
    warnings: [
        'Not bad, but you cod do batter!',
        'Something smells fishy...',
        'Warnings... Water those about?',
        'Looks like you are casting about.',
        'A bit pitchy, but tuna-ble.'
    ],
    errors: [
        'Ick! Errors!',
        'Some-fin went wrong...',
        'Unfor-tuna-tely, there are errors.',
        'That really smelt.',
        'You spawned some errors.',
        'Just keep swimming, Dory.',
        'This is the one that got away.',
        'The docs might be bene-fish-al.',
        'This was a turtle disaster.',
        'Something went eely wrong there.',
        'Documentation may be kelp-ful.'
    ]
};
const COLOR_MAP = {
    clean: chalk_1.default.green,
    warnings: chalk_1.default.rgb(179, 98, 0),
    errors: chalk_1.default.red
};
//# sourceMappingURL=app.js.map